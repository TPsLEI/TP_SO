Alguns conceitos fundamentais que são precisos saber: (apresentacão)

	- Recurso partilhado: um recurso computacional que é partilhado por múltiplas thread.
	
	- Secção crítica: secção do código que envolve um recurso partilhado em que o seu estado
	pode ser potencialmente alterado por múltiplas thread.
	
	- Situação de competição (race condition): uma situação em que não é possível determinar o
	estado do recurso partilhado que ocorre numa secção crítica.
	
	- Sincronização e/ou sinalização: uma solução para uma situação de competição que permite 
	que uma thread execute sobre uma secção crítica.
	
Tópicos: 

	- O kernel é o ficheiro principal do projeto, que faz os prints e cria as threads e essa merda toda

	- MEM, unidade principal de armazenamento de dados
	
	- CPU é o responsável pela gestão das tarefas
	
	- Middleware é a comunicação entre tudo utilizando protocolos de comunicação
	
	- O kernel deve ser o elemento onde o middleware esta apoiado
	
	- Outra funcionalidade do middleware é simular uma comunicação (um print, ou escreve um ficheiro)
	
	- Funcionalidades avançadas, está tudo a correr e há um processo que está a monitorar tudo, ou guardar num sistema de bases de dados, ou json ou assim
	
	- Criar um ficheiro de configurações para testes, ou para o stor testar no fim
	
	- Ficheiro de configuração que arranque tudo
	
	- Ambiente Java em que desenvolvemos (relatório)
	
	- Comandos necessários para correr (relatório)
	
	- Justificar uso de certos mecanismos de sincronização (relatório)
	
	- Colocar as cenas que não metemos mas que foi pedido (relatório)
	
	- EM PDF (relatório)
	 
	- o middleware é que tem de comunicar com o sistema operativo se não levamos no pelo
	  simular uma race condition a aplicação das tecnicas de sincronização tem de ter 
	  uma justificação pois também há probelmas nesse uso




Página Satélite
	- Ecrã para ver as mensagens 
	- Botão para exportar as mensagens
	- Ecrã para ver as logs
	- Botão para exportar as logs